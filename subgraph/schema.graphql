type PredictionMarket @entity {
  id: ID!               
  matchId: BigInt!
  matchTimestamp: BigInt!
  isResolved: Boolean!
  resolvedOutcome: Int 
}

type SharesPurchased @entity {
  id: ID!               
  market: Bytes!        
  buyer: Bytes!
  outcome: Int!
  shares: BigInt!
  actualCost: BigInt!
  timestamp: BigInt!
}

type SharesSold @entity {
  id: ID!
  market: Bytes!
  seller: Bytes!
  outcome: Int!
  shares: BigInt!
  actualGain: BigInt!
  timestamp: BigInt!
}

type OddsUpdated @entity {
  id: ID!
  market: Bytes!
  matchId: BigInt!
  home: BigInt!
  draw: BigInt!
  away: BigInt!
  timestamp: BigInt!
}

type MarketResolved @entity {
  id: ID!
  market: Bytes!
  matchId: BigInt!
  outcome: Int!
  timestamp: BigInt!
}

type PayoutRedeemed @entity {
  id: ID!
  market: Bytes!
  redeemer: Bytes!
  outcome: Int!
  amount: BigInt!
  timestamp: BigInt!
}

type TournamentMarket @entity {
  id: ID!
  tournamentId: BigInt!
  totalTeams: Int!
  isResolved: Boolean!
  resolvedOutcome: Int
  fixtures: [TournamentFixture!]! @derivedFrom(field: "market")
}

type TournamentSharesPurchased @entity {
  id: ID!
  market: Bytes!
  buyer: Bytes!
  outcome: Int!
  shares: BigInt!
  cost: BigInt!
  timestamp: BigInt!
}

type TournamentSharesSold @entity {
  id: ID!
  market: Bytes!
  seller: Bytes!
  outcome: Int!
  shares: BigInt!
  actualGain: BigInt!
  timestamp: BigInt!
}

type TournamentOddsUpdated @entity {
  id: ID!
  market: Bytes!
  prices: [BigInt!]!
  timestamp: BigInt!
}

type TournamentMarketResolved @entity {
  id: ID!
  market: Bytes!
  tournamentId: BigInt!
  outcome: Int!
  timestamp: BigInt!
}

type TournamentPayoutRedeemed @entity {
  id: ID!
  market: Bytes!
  tournamentId: BigInt!
  redeemer: Bytes!
  outcome: Int!
  amount: BigInt!
  timestamp: BigInt!
}

type TournamentFixture @entity {
  id: ID! 
  tournamentId: BigInt!
  matchId: BigInt!
  market: TournamentMarket!
  isRoundFinal: Boolean!
  isTournamentFinal: Boolean!
  resolved: Boolean!
}

